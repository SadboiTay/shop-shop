{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tghak\\\\Desktop\\\\projects\\\\shop-shop\\\\client\\\\src\\\\components\\\\ProductList\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\"; // REDUX\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport store from '../../utils/Redux/store';\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n  const {\n    currentCategory\n  } = state;\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS); // REDUX\n\n  const rState = store.getState();\n  const rCurrentCategory = useSelector(rState => rState.currentCategory);\n  const rProducts = useSelector(rState => rState.products);\n  const rDispatch = useDispatch();\n  console.log('redux state: ', rState);\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      }); // REDUX\n\n      rDispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      }); // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then(products => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        }); // REDUX\n\n        rDispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!rCurrentCategory) {\n      return rProducts;\n    }\n\n    return rProducts.filter(product => product.category._id === rCurrentCategory);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Our Products:\"), rProducts.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, filterProducts().map(product => /*#__PURE__*/React.createElement(ProductItem, {\n    key: product._id,\n    _id: product._id,\n    image: product.image,\n    name: product.name,\n    price: product.price,\n    quantity: product.quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"You haven't added any products yet!\"), loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 18\n    }\n  }) : null);\n}\n\nexport default ProductList;","map":{"version":3,"sources":["C:/Users/tghak/Desktop/projects/shop-shop/client/src/components/ProductList/index.js"],"names":["React","useEffect","useQuery","ProductItem","QUERY_PRODUCTS","spinner","useStoreContext","UPDATE_PRODUCTS","idbPromise","useSelector","useDispatch","store","ProductList","state","dispatch","currentCategory","loading","data","rState","getState","rCurrentCategory","rProducts","products","rDispatch","console","log","type","forEach","product","then","filterProducts","filter","category","_id","length","map","image","name","price","quantity"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\n// REDUX\nimport { useSelector, useDispatch } from 'react-redux'\nimport store from '../../utils/Redux/store';\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  // REDUX\n  const rState = store.getState();\n  const rCurrentCategory = useSelector(rState => rState.currentCategory)\n  const rProducts = useSelector(rState => rState.products)\n  const rDispatch = useDispatch();\n  console.log('redux state: ', rState)\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      // REDUX\n      rDispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n\n        // REDUX\n        rDispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!rCurrentCategory) {\n      return rProducts;\n    }\n\n    return rProducts.filter(product => product.category._id === rCurrentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {rProducts.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n"]},"metadata":{},"sourceType":"module"}
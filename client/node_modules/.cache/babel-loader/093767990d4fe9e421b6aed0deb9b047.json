{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tghak\\\\Desktop\\\\projects\\\\shop-shop\\\\client\\\\src\\\\components\\\\ProductList\\\\index.js\";\n// fully refactored\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif'; // import { useStoreContext } from '../../utils/GlobalState';\n\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\"; // REDUX IMPORTS\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nfunction ProductList() {\n  // const [state, dispatch] = useStoreContext();\n  // const { currentCategory } = state;\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS); // REDUX VARIABLES\n\n  const rCurrentCategory = useSelector(state => state.currentCategory);\n  const rProducts = useSelector(state => state.products);\n  const rDispatch = useDispatch();\n  useEffect(() => {\n    if (data) {\n      // dispatch({\n      //   type: UPDATE_PRODUCTS,\n      //   products: data.products\n      // });\n      // REDUX DISPATCH\n      rDispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      }); // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then(products => {\n        // use retrieved data to set global state for offline browsing\n        // dispatch({\n        //   type: UPDATE_PRODUCTS,\n        //   products: products\n        // });\n        // REDUX DISPATCH\n        rDispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, rDispatch]);\n\n  function filterProducts() {\n    if (!rCurrentCategory) {\n      return rProducts;\n    }\n\n    return rProducts.filter(product => product.category._id === rCurrentCategory);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"Our Products:\"), rProducts.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, filterProducts().map(product => /*#__PURE__*/React.createElement(ProductItem, {\n    key: product._id,\n    _id: product._id,\n    image: product.image,\n    name: product.name,\n    price: product.price,\n    quantity: product.quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"You haven't added any products yet!\"), loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 18\n    }\n  }) : null);\n}\n\nexport default ProductList;","map":{"version":3,"sources":["C:/Users/tghak/Desktop/projects/shop-shop/client/src/components/ProductList/index.js"],"names":["React","useEffect","useQuery","ProductItem","QUERY_PRODUCTS","spinner","UPDATE_PRODUCTS","idbPromise","useSelector","useDispatch","ProductList","loading","data","rCurrentCategory","state","currentCategory","rProducts","products","rDispatch","type","forEach","product","then","filterProducts","filter","category","_id","length","map","image","name","price","quantity"],"mappings":"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","sourcesContent":["// fully refactored\n\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\n// REDUX IMPORTS\nimport { useSelector, useDispatch } from 'react-redux'\n\nfunction ProductList() {\n  // const [state, dispatch] = useStoreContext();\n\n  // const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  // REDUX VARIABLES\n  const rCurrentCategory = useSelector(state => state.currentCategory)\n  const rProducts = useSelector(state => state.products)\n  const rDispatch = useDispatch();\n\n  useEffect(() => {\n    if (data) {\n      // dispatch({\n      //   type: UPDATE_PRODUCTS,\n      //   products: data.products\n      // });\n\n      // REDUX DISPATCH\n      rDispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        // dispatch({\n        //   type: UPDATE_PRODUCTS,\n        //   products: products\n        // });\n\n        // REDUX DISPATCH\n        rDispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, rDispatch]);\n\n  function filterProducts() {\n    if (!rCurrentCategory) {\n      return rProducts;\n    }\n\n    return rProducts.filter(product => product.category._id === rCurrentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {rProducts.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n"]},"metadata":{},"sourceType":"module"}
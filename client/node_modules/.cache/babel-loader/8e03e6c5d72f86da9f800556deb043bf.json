{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tghak\\\\Desktop\\\\projects\\\\shop-shop\\\\client\\\\src\\\\pages\\\\Detail.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif'; // import { useStoreContext } from \"../utils/GlobalState\";\n\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART, UPDATE_PRODUCTS } from '../utils/actions';\nimport Cart from '../components/Cart';\nimport { idbPromise } from \"../utils/helpers\"; // REDUX IMPORTS\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nfunction Detail() {\n  // const [state, dispatch] = useStoreContext();\n  const {\n    id\n  } = useParams();\n  const [currentProduct, setCurrentProduct] = useState({});\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS); // const { products, cart } = state;\n  // REDUX VARIABLES\n\n  const rDispatch = useDispatch();\n  const rCart = useSelector(state => state.cart);\n  const rProducts = useSelector(state => state.products);\n\n  const addToCart = () => {\n    const itemInCart = rCart.find(cartItem => cartItem._id === id);\n\n    if (itemInCart) {\n      // dispatch({\n      //   type: UPDATE_CART_QUANTITY,\n      //   _id: id,\n      //   purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      // });\n      // REDUX DISPATCH\n      rDispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      }); // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n\n      idbPromise('cart', 'put', { ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      // dispatch({\n      //   type: ADD_TO_CART,\n      //   product: { ...currentProduct, purchaseQuantity: 1 }\n      // });\n      // REDUX DISPATCH\n      rDispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct,\n          purchaseQuantity: 1\n        }\n      }); // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n\n      idbPromise('cart', 'put', { ...currentProduct,\n        purchaseQuantity: 1\n      });\n    }\n  };\n\n  const removeFromCart = () => {\n    // dispatch({\n    //   type: REMOVE_FROM_CART,\n    //   _id: currentProduct._id\n    // });\n    // REDUX DISPATCH\n    rDispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    }); // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n\n    idbPromise('cart', 'delete', { ...currentProduct\n    });\n  };\n\n  useEffect(() => {\n    // already in global store\n    if (rProducts.length) {\n      setCurrentProduct(rProducts.find(product => product._id === id));\n    } // retrieved from server\n    else if (data) {\n      // dispatch({\n      //   type: UPDATE_PRODUCTS,\n      //   products: data.products\n      // });\n      // REDUX DISPATCH\n      rDispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    } // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then(indexedProducts => {\n        // dispatch({\n        //   type: UPDATE_PRODUCTS,\n        //   products: indexedProducts\n        // });\n        // REDUX DISPATCH\n        rDispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [rProducts, data, loading, rDispatch, id]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, currentProduct ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, \"\\u2190 Back to Products\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, currentProduct.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, currentProduct.description), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, \"Price:\"), \"$\", currentProduct.price, ' ', /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addToCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, \"Add to Cart\"), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !rCart.find(p => p._id === currentProduct._id),\n    onClick: removeFromCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, \"Remove from Cart\")), /*#__PURE__*/React.createElement(\"img\", {\n    src: `/images/${currentProduct.image}`,\n    alt: currentProduct.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  })) : null, loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 18\n    }\n  }) : null, /*#__PURE__*/React.createElement(Cart, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Detail;","map":{"version":3,"sources":["C:/Users/tghak/Desktop/projects/shop-shop/client/src/pages/Detail.js"],"names":["React","useEffect","useState","Link","useParams","useQuery","QUERY_PRODUCTS","spinner","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","ADD_TO_CART","UPDATE_PRODUCTS","Cart","idbPromise","useSelector","useDispatch","Detail","id","currentProduct","setCurrentProduct","loading","data","rDispatch","rCart","state","cart","rProducts","products","addToCart","itemInCart","find","cartItem","_id","type","purchaseQuantity","parseInt","product","removeFromCart","length","forEach","then","indexedProducts","name","description","price","p","image"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\n\n// import { useStoreContext } from \"../utils/GlobalState\";\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\n\nimport Cart from '../components/Cart';\n\nimport { idbPromise } from \"../utils/helpers\";\n\n// REDUX IMPORTS\nimport { useSelector, useDispatch } from 'react-redux'\n\nfunction Detail() {\n  // const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  // const { products, cart } = state;\n\n  // REDUX VARIABLES\n  const rDispatch = useDispatch();\n  const rCart = useSelector(state => state.cart);\n  const rProducts = useSelector(state => state.products);\n\n  const addToCart = () => {\n    const itemInCart = rCart.find((cartItem) => cartItem._id === id)\n\n    if (itemInCart) {\n      // dispatch({\n      //   type: UPDATE_CART_QUANTITY,\n      //   _id: id,\n      //   purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      // });\n\n      // REDUX DISPATCH\n      rDispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      // dispatch({\n      //   type: ADD_TO_CART,\n      //   product: { ...currentProduct, purchaseQuantity: 1 }\n      // });\n\n      // REDUX DISPATCH\n      rDispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  }\n\n  const removeFromCart = () => {\n    // dispatch({\n    //   type: REMOVE_FROM_CART,\n    //   _id: currentProduct._id\n    // });\n\n    // REDUX DISPATCH\n    rDispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  useEffect(() => {\n    // already in global store\n    if (rProducts.length) {\n      setCurrentProduct(rProducts.find(product => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      // dispatch({\n      //   type: UPDATE_PRODUCTS,\n      //   products: data.products\n      // });\n\n      // REDUX DISPATCH\n      rDispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        // dispatch({\n        //   type: UPDATE_PRODUCTS,\n        //   products: indexedProducts\n        // });\n\n        // REDUX DISPATCH\n        rDispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [rProducts, data, loading, rDispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!rCart.find(p => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}